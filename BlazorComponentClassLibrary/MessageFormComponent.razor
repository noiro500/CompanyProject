@using Dto
<Validations @ref="@fluentValidations" Mode="ValidationMode.Manual" Model="@messageDto" HandlerType="typeof(FluentValidationHandler)">
    <Fields>
        <Field ColumnSize="ColumnSize.IsHalf">
            <Validation>
                <FieldLabel RequiredIndicator><Strong>@messageParametersList[0]</Strong></FieldLabel>
                    <FieldBody>
                        <TextEdit Role="TextRole.Text" Placeholder="Как к вам обрщаться?" @bind-Text="@messageDto.PersonName">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Validation>
            </Field>
            <Field ColumnSize="ColumnSize.IsHalf">
                <Validation>
                    <FieldLabel RequiredIndicator><Strong>@messageParametersList[1]</Strong></FieldLabel>
                    <FieldBody>
                        <TextEdit Role="TextRole.Text" Placeholder="Тема обращения" @bind-Text="@messageDto.SubjectMessage">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Validation>
            </Field>


            <Field ColumnSize="ColumnSize.IsHalf">
                <Validation>
                    <FieldLabel><Strong>@messageParametersList[2]</Strong></FieldLabel>
                    <FieldBody>
                        <TextEdit Role="TextRole.Email" Placeholder="Ваш адрес электронной почты" @bind-Text="@messageDto.Email">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Validation>
            </Field>

            <Field ColumnSize="ColumnSize.IsHalf">
                <Validation>
                    <FieldLabel RequiredIndicator><Strong>@messageParametersList[3]</Strong></FieldLabel>
                    <FieldBody>
                        <TextEdit Role="TextRole.Telephone" Placeholder="+7-(000)-000-00-00" @bind-Text="@messageDto.WhatsAppTelegramNumber">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Validation>
            </Field>

            <Field ColumnSize="ColumnSize.IsFull">
                <Validation>
                    <FieldLabel RequiredIndicator><Strong>@messageParametersList[4]</Strong></FieldLabel>
                    <FieldBody>
                        <MemoEdit MaxLength="280" Rows="4" Style="resize: none" Placeholder="Ваше сообщение (максимум 280 символов)" @bind-Text="messageDto.Content">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </MemoEdit>
                    </FieldBody>
                </Validation>
                <FieldBody>
                    <Check TValue="bool" Checked="@isAdoptedPrivacyPolicy">
                        <Span>Я принимаю Политику конфиденциальности</Span>
                    </Check>
                </FieldBody>
            </Field>

            <Column ColumnSize="ColumnSize.IsFull">
                <Div>
                    <Button Color="Color.Primary" Clicked="@OnButtonSendClicked">Отправить</Button>
                    <Button Color="Color.Secondary" Clicked="@OnButtonClearClicked">Очистить</Button>
                </Div>
            </Column>
        </Fields>
    </Validations>

    @code {
    MessageDto messageDto = new();
    Validations fluentValidations;
    private bool isInitialized = false;
    List<string> messageParametersList { get; set; }
    bool isAdoptedPrivacyPolicy = true;

    protected async Task OnSavePerson()
    {
        if (await fluentValidations.ValidateAll())
        {
            // the person is validated and we can proceed with the saving process
        }
    }
    protected override async Task OnInitializedAsync()
    {
        if (!isInitialized)
        {
            messageParametersList = new[] { "PersonName", "SubjectMessage", "Email", "WhatsAppTelegramNumber", "Content" }
                .Select(p => messageDto.GetType().GetProperty(p)!.GetCustomAttribute<DisplayAttribute>()!.Name!)
                .ToList();
            isInitialized = true;
        }
    }

    protected async Task OnButtonSendClicked()
    {

    }

    protected async Task OnButtonClearClicked()
    {

    }
}