@inject IContentServiceAddress _contentServiceAddress
@inject IContentServicePriceList _contentServicePriceList
<Container>
    <Form Margin="Margin.Is2.OnX">
        <Validations @ref="fluentValidations" Mode="ValidationMode.Manual" Model="@orderViewModelDto" HandlerType="typeof(FluentValidationHandler)">
            <Row>
                <Column ColumnSize="ColumnSize.IsFull">
                    <Validations>
                        <Field>
                            <FieldLabel RequiredIndicator><Strong>@orderParametersList[0]</Strong></FieldLabel>
                            <TextEdit Role="TextRole.Text" Placeholder="Как к вам обрщаться?" @bind-Text="orderViewModelDto.Name">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validations>
                </Column>
            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.IsThird">
                    <Validation>
                        <Field>
                            <FieldLabel RequiredIndicator><Strong>@orderParametersList[1]</Strong></FieldLabel>
                            <TextEdit Role="TextRole.Telephone" Placeholder="+7-000-000-00-00" @bind-Text="orderViewModelDto.MessageNumber">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                </Column>
                <Column ColumnSize="ColumnSize.IsThird">
                    <Field>
                        <FieldLabel><Strong>@orderParametersList[2]</Strong></FieldLabel>
                        <TextEdit Role="TextRole.Telephone" Placeholder="+7-000-000-00-00" @bind-Text="orderViewModelDto.MessageNumber">
                        </TextEdit>
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.IsThird">
                    <Field>
                        <FieldLabel><Strong>@orderParametersList[3]</Strong></FieldLabel>
                        <TextEdit Role="TextRole.Email" Placeholder="Ваш адрес электронной почты" @bind-Text="orderViewModelDto.Email">
                        </TextEdit>
                    </Field>
                </Column>
            </Row>
        </Validations>
        <Row>
            <Column ColumnSize="ColumnSize.IsThird">
                <Field>
                    <FieldLabel RequiredIndicator><Strong>@orderParametersList[7]</Strong></FieldLabel>
                    <Select TValue="int" SelectedValue=@SelectedTerritory SelectedValueChanged="@(async () => DistrictList = await _contentServiceAddress.GetPartOfAddress("District"))">
                        <SelectItem Value="1" Disabled="true">Выберите край/область...</SelectItem>
                        <SelectItem Value="2">Ставропольский край</SelectItem>
                    </Select>
                </Field>
            </Column>
            <Column ColumnSize="ColumnSize.IsThird">
                <Field>
                    <FieldLabel RequiredIndicator><Strong>@orderParametersList[8]</Strong></FieldLabel>
                    <SelectList TItem="PartOfAddressDto" 
                                TValue="int"
                                Data="@DistrictList"
                                TextField="@((item) => item.Name)"
                                ValueField="@((item) => item.Id)"
                                DefaultItemDisabled="true"
                                @bind-SelectedValue="@SelectedDistrict"
                                DefaultItemText="Выберите район/округ/городской округ..." />
                </Field>
            </Column>
            <Column ColumnSize="ColumnSize.IsThird">
                <Field>
                    <FieldLabel RequiredIndicator><Strong>@orderParametersList[9]</Strong></FieldLabel>
                    <Select TValue="int" SelectedValue="1">
                        <SelectItem Value="1" Disabled="true">Выберите населенный пункт...</SelectItem>
                        @* Сделать запрос к бд *@
                        <SelectItem Value="2">Ставропольский край</SelectItem>
                    </Select>
                </Field>
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.IsThird">
                <Field>
                    <FieldLabel><Strong>@orderParametersList[10]</Strong></FieldLabel>
                    <Select TValue="int" SelectedValue="1">
                        <SelectItem Value="1" Disabled="true">Выберите улицу/проспект/переулок...</SelectItem>
                        @* Сделать запрос к бд *@
                        <SelectItem Value="2">Ставропольский край</SelectItem>
                    </Select>
                </Field>
            </Column>
            <Column ColumnSize="ColumnSize.IsThird">
                <Validations>
                    <Field>
                        <FieldLabel RequiredIndicator><Strong>@orderParametersList[11]</Strong></FieldLabel>
                        <TextEdit Role="TextRole.Text" Placeholder="Введите номер дома/строения" @bind-Text="orderViewModelDto.AddressData.HouseNumber">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validations>
            </Column>
            <Column ColumnSize="ColumnSize.IsThird">
                <Field>
                    <FieldLabel><Strong>@orderParametersList[12]</Strong></FieldLabel>
                    <TextEdit Role="TextRole.Text" Placeholder="Введите номер квартиры/офиса" @bind-Text="orderViewModelDto.AddressData.ApartmentOrOfficeNumber">
                    </TextEdit>
                </Field>
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.IsFull">
                <Field>
                    <FieldLabel RequiredIndicator><Strong>@orderParametersList[4]</Strong></FieldLabel>
                    <SelectList TItem="TypeOfFailureDto"
                                TValue="int"
                                Data="@TypeOfFailureList"
                                TextField="@((item) => item.ServiceName + " - " + item.Service)"
                                ValueField="@((item) => item.Id)"
                                DefaultItemDisabled="true"
                                @bind-SelectedValue="@SelectedTypeOfFailure"
                                DefaultItemText="Причина вызова мастера (если причины нет в списке, выберите 'Прочее')"/>
                </Field>
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.IsFull">
                @* <Validation> *@
                <Field>
                    <FieldLabel><Strong>@orderParametersList[5]</Strong></FieldLabel>
                    <MemoEdit MaxLength="1000" Rows="5" Style="resize: none" Placeholder="Краткое описание причины вызова (максимум 1000 символов)" @bind-Text="orderViewModelDto.SpecialInstruction">
                        @* <Feedback>
                        <ValidationError />
                        </Feedback> *@
                    </MemoEdit>
                </Field>
                @* </Validation> *@
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.IsFull">
                @* <Validation> *@
                <Field>
                    <FieldLabel><Strong>@orderParametersList[6]</Strong></FieldLabel>
                    <MemoEdit MaxLength="1000" Rows="5" Style="resize: none" Placeholder="Дополнительные сведения (схема проезда, код домофона и т.д.) (максимум 1000 символов)" @bind-Text="orderViewModelDto.Description">
                        @* <Feedback>
                        <ValidationError />
                        </Feedback> *@
                    </MemoEdit>
                </Field>
                @* </Validation> *@
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.IsFull">
                <Check TValue="bool" Class="checkbox" Style="top: -10px;" @bind-Checked="isAdoptedPrivacyPolicy">
                    <Span>Я принимаю <Link TextColor="TextColor.Dark" To="Resources/Files/privacy.pdf"><Strong>Политику конфиденциальности</Strong></Link></Span>
                </Check>
            </Column>
        </Row>
        <Row>
            <Column ColumnSize="ColumnSize.IsFull">
                <Div>
                    <Button Color="Color.Primary">Далее</Button>
                    <Button Color="Color.Secondary" Type="ButtonType.Reset">Очистить</Button>
                </Div>
            </Column>
        </Row>
    </Form>
    <br />
</Container>

@code {
    OrderViewModelDto orderViewModelDto{ get; set; }
    Validations fluentValidations;
    List<string> orderParametersList { get; set; }
    int selectedDistrict { get; set; }
    IEnumerable<PartOfAddressDto> DistrictList { get; set; } = null!;
    int SelectedTerritory { get; set; } = 1;
    bool isAdoptedPrivacyPolicy = true;
    IEnumerable<TypeOfFailureDto> TypeOfFailureList { get; set; } = null!;
    int SelectedTypeOfFailure { get; set; }
    int SelectedDistrict { get; set; }

    protected override async Task OnInitializedAsync()
    {
        orderViewModelDto = new();
        orderParametersList = typeof(OrderViewModelDto).GetProperties().Where(p => p.PropertyType != typeof(Dto.AddressDto) && p.PropertyType != typeof(Boolean)).Select(p => p.Name)
            .Select(p => orderViewModelDto.GetType().GetProperty(p)!.GetCustomAttribute<DisplayAttribute>()!.Name!).ToList();
        orderParametersList.AddRange(typeof(AddressDto).GetProperties().Select(p => p.Name)
            .Select(p => orderViewModelDto.AddressData!.GetType().GetProperty(p)!.GetCustomAttribute<DisplayAttribute>()!.Name!).ToList());
        TypeOfFailureList = (await _contentServicePriceList.GetListOfTypeOfFailure());
    }

    protected async Task GetDistrictAsync()
    {
        DistrictList = await _contentServiceAddress.GetPartOfAddress("District");

    }
}
